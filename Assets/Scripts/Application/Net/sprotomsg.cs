// Generated by sprotodump. DO NOT EDIT!
// source: bearrun.sproto

using System;
using Sproto;
using System.Collections.Generic;

namespace SprotoType { 
	public class close {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 0;
			
			
			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				return base.serialize.close ();
			}
		}


	}


	public class getRank {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 0;
			
			
			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private bool _status; // tag 0
			public bool status {
				get { return _status; }
				set { base.has_field.set_field (0, true); _status = value; }
			}
			public bool HasStatus {
				get { return base.has_field.has_field (0); }
			}

			private List<info> _rank; // tag 1
			public List<info> rank {
				get { return _rank; }
				set { base.has_field.set_field (1, true); _rank = value; }
			}
			public bool HasRank {
				get { return base.has_field.has_field (1); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.status = base.deserialize.read_boolean ();
						break;
					case 1:
						this.rank = base.deserialize.read_obj_list<info> ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_boolean (this.status, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_obj (this.rank, 1);
				}

				return base.serialize.close ();
			}
		}


	}


	public class getUser {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private string _username; // tag 0
			public string username {
				get { return _username; }
				set { base.has_field.set_field (0, true); _username = value; }
			}
			public bool HasUsername {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.username = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.username, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 6;
			
			
			private bool _status; // tag 0
			public bool status {
				get { return _status; }
				set { base.has_field.set_field (0, true); _status = value; }
			}
			public bool HasStatus {
				get { return base.has_field.has_field (0); }
			}

			private string _username; // tag 1
			public string username {
				get { return _username; }
				set { base.has_field.set_field (1, true); _username = value; }
			}
			public bool HasUsername {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _coin; // tag 2
			public Int64 coin {
				get { return _coin; }
				set { base.has_field.set_field (2, true); _coin = value; }
			}
			public bool HasCoin {
				get { return base.has_field.has_field (2); }
			}

			private Int64 _score; // tag 3
			public Int64 score {
				get { return _score; }
				set { base.has_field.set_field (3, true); _score = value; }
			}
			public bool HasScore {
				get { return base.has_field.has_field (3); }
			}

			private Int64 _rank; // tag 4
			public Int64 rank {
				get { return _rank; }
				set { base.has_field.set_field (4, true); _rank = value; }
			}
			public bool HasRank {
				get { return base.has_field.has_field (4); }
			}

			private Int64 _exp; // tag 5
			public Int64 exp {
				get { return _exp; }
				set { base.has_field.set_field (5, true); _exp = value; }
			}
			public bool HasExp {
				get { return base.has_field.has_field (5); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.status = base.deserialize.read_boolean ();
						break;
					case 1:
						this.username = base.deserialize.read_string ();
						break;
					case 2:
						this.coin = base.deserialize.read_integer ();
						break;
					case 3:
						this.score = base.deserialize.read_integer ();
						break;
					case 4:
						this.rank = base.deserialize.read_integer ();
						break;
					case 5:
						this.exp = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_boolean (this.status, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.username, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.coin, 2);
				}

				if (base.has_field.has_field (3)) {
					base.serialize.write_integer (this.score, 3);
				}

				if (base.has_field.has_field (4)) {
					base.serialize.write_integer (this.rank, 4);
				}

				if (base.has_field.has_field (5)) {
					base.serialize.write_integer (this.exp, 5);
				}

				return base.serialize.close ();
			}
		}


	}


	public class info : SprotoTypeBase {
		private static int max_field_count = 3;
		
		
		private string _username; // tag 0
		public string username {
			get { return _username; }
			set { base.has_field.set_field (0, true); _username = value; }
		}
		public bool HasUsername {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _score; // tag 1
		public Int64 score {
			get { return _score; }
			set { base.has_field.set_field (1, true); _score = value; }
		}
		public bool HasScore {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _scorerank; // tag 2
		public Int64 scorerank {
			get { return _scorerank; }
			set { base.has_field.set_field (2, true); _scorerank = value; }
		}
		public bool HasScorerank {
			get { return base.has_field.has_field (2); }
		}

		public info () : base(max_field_count) {}

		public info (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.username = base.deserialize.read_string ();
					break;
				case 1:
					this.score = base.deserialize.read_integer ();
					break;
				case 2:
					this.scorerank = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_string (this.username, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.score, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.scorerank, 2);
			}

			return base.serialize.close ();
		}
	}


	public class login {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private string _username; // tag 0
			public string username {
				get { return _username; }
				set { base.has_field.set_field (0, true); _username = value; }
			}
			public bool HasUsername {
				get { return base.has_field.has_field (0); }
			}

			private string _password; // tag 1
			public string password {
				get { return _password; }
				set { base.has_field.set_field (1, true); _password = value; }
			}
			public bool HasPassword {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.username = base.deserialize.read_string ();
						break;
					case 1:
						this.password = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.username, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.password, 1);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private bool _status; // tag 0
			public bool status {
				get { return _status; }
				set { base.has_field.set_field (0, true); _status = value; }
			}
			public bool HasStatus {
				get { return base.has_field.has_field (0); }
			}

			private string _error; // tag 1
			public string error {
				get { return _error; }
				set { base.has_field.set_field (1, true); _error = value; }
			}
			public bool HasError {
				get { return base.has_field.has_field (1); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.status = base.deserialize.read_boolean ();
						break;
					case 1:
						this.error = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_boolean (this.status, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.error, 1);
				}

				return base.serialize.close ();
			}
		}


	}


	public class package : SprotoTypeBase {
		private static int max_field_count = 2;
		
		
		private Int64 _type; // tag 0
		public Int64 type {
			get { return _type; }
			set { base.has_field.set_field (0, true); _type = value; }
		}
		public bool HasType {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _session; // tag 1
		public Int64 session {
			get { return _session; }
			set { base.has_field.set_field (1, true); _session = value; }
		}
		public bool HasSession {
			get { return base.has_field.has_field (1); }
		}

		public package () : base(max_field_count) {}

		public package (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.type = base.deserialize.read_integer ();
					break;
				case 1:
					this.session = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.type, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.session, 1);
			}

			return base.serialize.close ();
		}
	}


	public class postUser {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 5;
			
			
			private string _username; // tag 0
			public string username {
				get { return _username; }
				set { base.has_field.set_field (0, true); _username = value; }
			}
			public bool HasUsername {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _coin; // tag 1
			public Int64 coin {
				get { return _coin; }
				set { base.has_field.set_field (1, true); _coin = value; }
			}
			public bool HasCoin {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _score; // tag 2
			public Int64 score {
				get { return _score; }
				set { base.has_field.set_field (2, true); _score = value; }
			}
			public bool HasScore {
				get { return base.has_field.has_field (2); }
			}

			private Int64 _rank; // tag 3
			public Int64 rank {
				get { return _rank; }
				set { base.has_field.set_field (3, true); _rank = value; }
			}
			public bool HasRank {
				get { return base.has_field.has_field (3); }
			}

			private Int64 _exp; // tag 4
			public Int64 exp {
				get { return _exp; }
				set { base.has_field.set_field (4, true); _exp = value; }
			}
			public bool HasExp {
				get { return base.has_field.has_field (4); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.username = base.deserialize.read_string ();
						break;
					case 1:
						this.coin = base.deserialize.read_integer ();
						break;
					case 2:
						this.score = base.deserialize.read_integer ();
						break;
					case 3:
						this.rank = base.deserialize.read_integer ();
						break;
					case 4:
						this.exp = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.username, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.coin, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.score, 2);
				}

				if (base.has_field.has_field (3)) {
					base.serialize.write_integer (this.rank, 3);
				}

				if (base.has_field.has_field (4)) {
					base.serialize.write_integer (this.exp, 4);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private bool _status; // tag 0
			public bool status {
				get { return _status; }
				set { base.has_field.set_field (0, true); _status = value; }
			}
			public bool HasStatus {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.status = base.deserialize.read_boolean ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_boolean (this.status, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class register {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private string _username; // tag 0
			public string username {
				get { return _username; }
				set { base.has_field.set_field (0, true); _username = value; }
			}
			public bool HasUsername {
				get { return base.has_field.has_field (0); }
			}

			private string _password; // tag 1
			public string password {
				get { return _password; }
				set { base.has_field.set_field (1, true); _password = value; }
			}
			public bool HasPassword {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.username = base.deserialize.read_string ();
						break;
					case 1:
						this.password = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.username, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.password, 1);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private bool _status; // tag 0
			public bool status {
				get { return _status; }
				set { base.has_field.set_field (0, true); _status = value; }
			}
			public bool HasStatus {
				get { return base.has_field.has_field (0); }
			}

			private string _error; // tag 1
			public string error {
				get { return _error; }
				set { base.has_field.set_field (1, true); _error = value; }
			}
			public bool HasError {
				get { return base.has_field.has_field (1); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.status = base.deserialize.read_boolean ();
						break;
					case 1:
						this.error = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_boolean (this.status, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.error, 1);
				}

				return base.serialize.close ();
			}
		}


	}


}


public class Protocol : ProtocolBase {
	public static  Protocol Instance = new Protocol();
	private Protocol() {
		Protocol.SetProtocol<close> (close.Tag);
		Protocol.SetRequest<SprotoType.close.request> (close.Tag);

		Protocol.SetProtocol<getRank> (getRank.Tag);
		Protocol.SetRequest<SprotoType.getRank.request> (getRank.Tag);
		Protocol.SetResponse<SprotoType.getRank.response> (getRank.Tag);

		Protocol.SetProtocol<getUser> (getUser.Tag);
		Protocol.SetRequest<SprotoType.getUser.request> (getUser.Tag);
		Protocol.SetResponse<SprotoType.getUser.response> (getUser.Tag);

		Protocol.SetProtocol<login> (login.Tag);
		Protocol.SetRequest<SprotoType.login.request> (login.Tag);
		Protocol.SetResponse<SprotoType.login.response> (login.Tag);

		Protocol.SetProtocol<postUser> (postUser.Tag);
		Protocol.SetRequest<SprotoType.postUser.request> (postUser.Tag);
		Protocol.SetResponse<SprotoType.postUser.response> (postUser.Tag);

		Protocol.SetProtocol<register> (register.Tag);
		Protocol.SetRequest<SprotoType.register.request> (register.Tag);
		Protocol.SetResponse<SprotoType.register.response> (register.Tag);

	}

	public class close {
		public const int Tag = 6;
	}

	public class getRank {
		public const int Tag = 5;
	}

	public class getUser {
		public const int Tag = 3;
	}

	public class login {
		public const int Tag = 1;
	}

	public class postUser {
		public const int Tag = 4;
	}

	public class register {
		public const int Tag = 2;
	}

}